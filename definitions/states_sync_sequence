/** State sync sequence **/

This part described the messages and their sequece of a node trying to synchronize its state.


Assuming this data structure as a consensus mechanism on the Ethereum network

// Enigma smart contract stores in some way or another:
+--------------------+----------------+-----------+---------+------+
| secret-contracts   | deployed code  | delta 1   | delta 2 | ...  |
| address            | + payload hash | hash      | hash    | ...  |
+--------------------+----------------+-----------+---------+------+
| 0x01...            | asd..          | h(d1)     | h(d2)   | ...  |
| 0x02...            | bk2..          | h(d1)     | h(d2)   | ...  |
| 0x03...            | sg3..          | h(d1)     | h(d2)   | ...  |
| 0x04...            | 4fh..          | h(d1)     | h(d2)   | ...  |
+--------------------+----------------+-----------+---------+------+

### What does it mean for a worker to by synced ###:

* CURRENT_ONCHAIN_CONTRACTS_NUM : The total number of contracts.
* CURRENT_ONCHAIN_CONCTRACTS_ADDRS : List of all the contract addresses.
* for each contract addr in CURRENT_ONCHAIN_CONCTRACTS_ADDRS:
    * CONTRACT_CODE
    * CURRENT_ONCHAIN_DELTAS : List of all the deltas hashes in a sequence order (delta 0 hash = initial state hash)



### The flow of a new node in the network ####:

0) Bootstrap, reach optimal DHT
1) Load local state
2) Build "Hits Map" from RemoteState(Ethereum) - LocalState
3) Sync the "Hits Map" - synchronize from other peers // STATE_SYNC_REQ/RES
4) Announce (IPFS/CID) holdings (for each contract announce CID(address) )


### State sync request  - STATE_SYNC_REQ/RES ###

The message exchange process during #3

After finding the peer CID provider of a contract , request :

{
    "header" : {
        "from" : "",
        "to" : "",
        "type" : "STATE_SYNC_REQ",
        "timestamp" : "",
    }
    "body" : {
        "address" : "",
        "withBytecode" : bool,
        "range" : {
            "from" : {
                "index" : number,
                "hash" : hash
            },
            "to" : {
                "index" : number,
                "hash" : hash
            }
        }
    }
}


The providing peer will respond with up to 500 deltas in each range request, each response is a chunk

There are 2 type of responses: STATE_SYNC_RES_DELTA and STATE_SYNC_RES_CODE.

{
    "header" : {
        "from" : "",
        "to" : "",
        "type" : "STATE_SYNC_RES_DELTA", // alternative STATE_SYNC_RES_CODE
        "timestamp" : "",
    }
    "body" : { // alternative {address,code,hash}
        "address" : address
        "index" : number,
        "hash" : hash(delta)
        "delta" : bytes
    }
}

















