
//// WORKER FACTORY
////
//// class WorkerFactory{
////     constructor(){
////         this.creators = {};
////         this.creators['bootstrapCreator'] = this._createBootstrapNode;
////         this.creators['workerCreator'] = this._createWorkerNode;
////     }
////     /**Create new node
////      * @param {Json} options {
////      *  'db' : {
////      *      ???
////      *  }
////      *  'is_worker' : true,
////      *  'is_bootstrap' : false,
////      *  'bootstrap_nodes_list' : [],
////      *  'port' : '0',
////      *  'multiaddresses' : []
////      *  'create_id' : '',
////      *  'id_path' : '/some/path',
////      *  'port' : '0',
////      *  'handler' : ProtocolHandler,
////      *  'connection_manager' : ConnectionManager,
////      *  'polocy' : Policy
////      *  'protocols' : [],
////      *  'libp2p' : {
////      *      'discovery' : 'true',
////      *      'interval' : 2000,
////      *      'k_bucket_size' : 20,
////      *    }
////      * }
////      * */
////     create(options){
////         if(options['is_boostrap']){
////             this.creators['bootstrapCreator'](options);
////         }else if(options['is_boostrap']){
////             this.creators['workerCreator'](options);
////         }else{
////             throw {"name" : "NoTypeDefined", "message" : "either boostrap or worker"};
////         }
////     }
////     _createBootstrapNode(options){
////
////     }
////     _createWorkerNode(options){
////
////     }
//// }
//{
//  "p2p" : {
//    "discovery":{
//        "bootstrapNodes" : [],
//        ""
//    }
//  },
//  "coreIpc":{},
//  "db":{}
//}